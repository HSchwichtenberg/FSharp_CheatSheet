#!meta

{"kernelInfo":{"defaultKernelName":"fsharp","items":[{"aliases":[],"languageName":"fsharp","name":"fsharp"}]}}

#!markdown

# Funktionen

#!markdown

## Funktion ohne Parameter

#!fsharp

 let output = 
   printfn "Hallo, Welt!"
 
 output

#!markdown

## Funktion mit einem Parameter

#!fsharp

let greet name = 
   printfn "Hallo, %s!" name
 
greet "Holger"

#!markdown

## Funktion mit mehreren Parametern

#!fsharp

 let info name alter wohnort = 
    printfn "%s ist %d Jahre alt und wohnt in %s" name alter wohnort
 
 info "Holger" 51 "Essen"

#!markdown

## Funktion mit einem Parameter und Typangabe

#!fsharp

let greet (name:string) = 
   printfn "Hallo, %s!" name
   
greet "Holger"

#!markdown

## Funktion mit einem (Tupel-)Parameter und Typangabe

Viele C#-Programmierer nehmen hier fälschlich an, dass diese Funktion mehrere Parameter hat. Prüfen Sie mit der Maus die hergeleitete Signatur! Diese Syntax wird generell nur für Interop mit .NET verwendet.

#!fsharp

 let info (name:string, alter:int) = 
    printfn "%s ist %d Jahre alt." name alter
 
 info ("Holger", 51)

#!markdown

## Funktion mit mehreren Parametern und Typangabe

#!fsharp

 let info (name:string) (alter:int) = 
    printfn "%s ist %d Jahre alt." name alter
 
 info "Holger" 51

#!markdown

## Funktion mit Rückgabewert

#!fsharp

 let infoString name alter = 
   let r = sprintf "%s ist %d Jahre alt" name alter
   r + "." // letzter Ausdruck ist der Rückgabewert

 let text = infoString "Holger" 51
 printfn "%s" text

 // Oder kürzer:
 let infoString2 name alter = sprintf "%s ist %d Jahre alt" name alter

 printfn "%s" (infoString2 "Holger" 51)

#!markdown

## Klammern beim Funktionsaufruf

Funktionsaufrufe in F# verwenden keine Klammer, Parameter werden durch Leerzeichen getrennt. Stattdessen muss geklammert werden, wenn das Resultat eines Ausdrucks als Parameter an eine Funktion übergeben wird.

#!fsharp

let square x = x * x

let square15 = square 15
let square10plus5 = square (10 + 5)

let add x y = x + y

// Zum Vergleich, C#: add(10 + 3, 30 - 1)
add (10 + 3) (30 - 1)
// Bei Bedarf Klammern schachteln
printfn "%d" (add (10 + 3) (30 - 1))

#!markdown

## Hergeleitete Typen werden durch Verwendung beeinflusst

#!fsharp

// Oben hat diese Funktion die Signatur int -> int -> int
// Diesmal allerdings float -> float -> float
let add x y = x + y

// Durch diese Verwendung werden die Typen der Parameter
// als float festgelegt. 
printfn "%e" (add 12.4 13.6)

#!markdown

## Rekursive Funktion

#!fsharp

let rec factorial x = 
  match x with 
  | 0 -> 1
  | _ -> factorial (x - 1) * x

printfn "%d" (factorial 5)

#!markdown

## Gegenseitig rekursive Funktionen

#!fsharp

// Funktionen, die sich gegenseitig aufrufen, müssen gemeinsam mit den Schlüsselworten
// "rec" und "and" deklariert werden.

let rec ping c v =
    match c with
    | 0 -> v
    | _ -> pong (c - 1) (v + c)

and pong c v =
    match c with
    | 0 -> v
    | _ -> ping (c - 1) (v + c)

printfn $"Ping/pong result: %d{ping 20 0}"

#!markdown

## Pattern-Matching-Funktion

Solche Funktionen werden oft verwendet, wenn "nur" ein Match ausgeführt werden soll.

#!fsharp

let rec factorial = function
  | 0 -> 1
  | x -> factorial (x - 1) * x

printfn "%d" (factorial 5)

#!markdown

## Funktionen als Parameter

#!fsharp

let rec map f = function
  | [] -> []
  | x :: xs -> f x :: (map f xs)

let square x = x * x
let values = [10; 20; 30]
printfn $"Quadratzahlen: %A{map square values}"

// Ad-hoc mit Lambda-Ausdruck
printfn $"Doppelte Werte: %A{map (fun x -> x * 2) values}"

#!markdown

## Partial Application

#!fsharp

// Allgemeine Funktion addiert zwei beliebige Zahlen
let add x y = x + y
// Spezielle Variante addiert immer 5
let add5 = add 5

printfn "%d" (add 10 20)
printfn "%d" (add5 25)

let square x = x * x
let values = [10; 20; 30]

// Allgemeine map-Funktion ruft Funktion für jedes Element einer Liste auf
printfn "%A" (List.map square values)

// Besondere map-Funktion addiert 5 zu jedem Listenelement
let add5List = List.map add5

printfn "%A" (add5List values)

// printfn mit mehreren Platzhaltern kann auch "teilweise angewendet" werden
let printTwoPart = printfn "%s: %A" 
let printResult = printTwoPart "Ergebnis"
printResult (List.map square values)

#!markdown

## Pipelines und Komposition

#!fsharp

let add5 x = x + 5
let square x = x * x

// Aufrufe können geschachtelt werden
printfn "%d" (square (add5 17))
// Pipelines ermöglichen eine natürliche Reihenfolge der Funktionsaufrufe
printfn "%d" (add5 17 |> square)

// Komposition -- wenn die Schritte einer Pipeline wiederverwendet werden sollen
let add5ThenSquare = add5 >> square
printfn "%d" (add5ThenSquare 17)

#!markdown

## Eigene Operatoren

#!fsharp

let div x y = x / y

// Diese Funktion flip kann Parameter einer Funktion vertauschen
let flip f x y = f y x

printfn "10 / 5 = %e" (div 10.0 5.0)
printfn "5 / 10 = %e" ((flip div) 10.0 5.0)

// Auch der Operator / kann wie div verwendet werden
printfn "10 / 5 = %e" ((/) 10.0 5.0)
printfn "5 / 10 = %e" ((flip (/)) 10.0 5.0)

// Statt flip einen eigenen Operator erzeugen
let (><) = flip

// Nun kann Partial Application von der rechten Seite erfolgen
let durch5 = (/) >< 5.0

printfn "10 / 5 = %e" (durch5 10.0)

#!markdown

## Precomputation mit Rückgabe dynamisch erzeugter Funktionen

#!fsharp

open System.Collections.Generic

// Parameter spezifisch typisiert, damit der generische
// Typ 'a für die Instanziierung des HashSet verfügbar ist
let fastLookup (list: 'a list) = 
  // HashSet für die Liste erzeugen
  let lookupSet = new HashSet<'a>(list)
  // Nachschlagefunktion zurück geben
  fun v -> 
    lookupSet.Contains v

let values = ["Oli"; "Holger"; "C#"; "F#" ]    

let enthalten = fastLookup values

printfn "Holger: %b" (enthalten "Holger")
printfn "F#: %b" (enthalten "F#")
printfn "Visual Basic: %b" (enthalten "Visual Basic")
