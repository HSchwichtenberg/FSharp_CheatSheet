#!meta

{"kernelInfo":{"defaultKernelName":"fsharp","items":[{"aliases":[],"languageName":"fsharp","name":"fsharp"}]}}

#!markdown

# Computation Expressions

Eine vereinheitlichte Syntax für kontextbehaftete Berechnungen in F#, wie etwa Monaden oder Funktoren in anderen Sprachen.

#!markdown

## Sequenz-Expressions

#!fsharp

// Werte algorithmisch erzeugen
let oddNumbers cutoff = 
  seq {
    for i in 1..cutoff do
      if i % 2 <> 0 then
        yield i
  }

// Explizite Werte
let variousNumbers = 
  seq {
    17
    25
    42
  }

// Sequenzen kombinieren, auch mit expliziten Werten
let combine x y = 
  seq {
    yield! x
    101
    yield! y
  }

printfn "%A" (oddNumbers 10 |> Seq.toList) // [1; 3; 5; 7; 9]

printfn "%A" (combine (oddNumbers 10) variousNumbers |> Seq.toList) // [1; 3; 5; 7; 9; 101; 17; 25; 42]

// Rekursive Sequenz
let rec endless x = 
  seq {
    yield x
    yield! (endless x)
  }

// Besser nur die ersten 10 Elemente ausgeben
printfn "%A" (endless 42 |> Seq.take 10 |> Seq.toList) // [42; 42; 42; 42; 42; 42; 42; 42; 42; 42]

#!markdown

## Async und Task Expressions

Task Expressions bieten sich an, wenn Interaktion mit .NET APIs notwendig ist, die auf Task basieren. 

#!fsharp

open System
open System.Threading
open System.Threading.Tasks

let counterTask (cancelToken: CancellationToken) =
  task {
    let mutable counter = 0
    while not cancelToken.IsCancellationRequested do
      printfn "Async Zähler: %d" counter
      counter <- counter + 1
      do! Task.Delay(500)
  }

printfn "Starte Zähler..."
let cts = new CancellationTokenSource()
let counter = counterTask cts.Token
printfn "Zähler gestartet, Hauptprogramm wartet 5 Sekunden..."
Task.Delay(5000).Wait()
printfn "Hauptprogramm beendet, Zähler abbrechen..."
cts.Cancel()
counter.Wait()
printfn "Zähler abgebrochen, Hauptprogramm beendet."

#!markdown

Die F#-eigene Async-Expression ist jedoch mächtiger und flexibler.

#!fsharp

open System.Threading

let counterAsync (cancelToken: CancellationToken) =
  async {
    let mutable counter = 0
    while not cancelToken.IsCancellationRequested do
      printfn "Async Zähler: %d" counter
      counter <- counter + 1
      do! Async.Sleep 500
  }

printfn "Starte Zähler..."
let cts = new CancellationTokenSource()
counterAsync cts.Token |> Async.Start
printfn "Zähler gestartet, Hauptprogramm wartet 5 Sekunden..."
Async.Sleep(5000) |> Async.RunSynchronously
printfn "Hauptprogramm beendet, Zähler abbrechen..."
cts.Cancel()
printfn "Zähler abgebrochen, Hauptprogramm beendet."

#!markdown

## Query Expressions

Ähnlich LINQ in C#, hier basierend auf `IEnumerable<T>`, aber auch mit `IQueryable<T>` kompatibel.

#!fsharp

open System

let numbers = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10]

let queryResult =
  query {
    for n in numbers do
    where (n % 2 = 0)
    select (n * n)
  }

queryResult |> Seq.iter (printfn "Result: %d")

#!markdown

## Eigene Computation Expressions

Das Beispiel zeigt eine eigene Computation Expression, die den `Result`-Typ als Kontext verwendet und eine monadische Verkettung von Operationen ermöglicht, wie sie mithilfe von `bind` und `map` im Notebook *Resultate* gezeigt wurde.

#!fsharp

type ResultBuilder() =
  member x.Bind(result, binder) = Result.bind binder result
  member x.Return(value) = Ok value
  member x.ReturnFrom(result) = result
  member x.Zero() = Error "Null"

let result = ResultBuilder()

let div x y = 
  if y = 0 then Error "Division durch Null"
  else Ok (x / y)

// Einige Funktionen, die mit einfachen ints arbeiten
let square x = x * x
let add x y = x + y

let calcSequence x = 
  result {
    let! a = div 20 x
    let b = square a
    let! c = div b 2
    return add c 5
  }

printfn "%A" (calcSequence 4) // Ok 17
printfn "%A" (calcSequence 0) // Error "Division durch Null"
