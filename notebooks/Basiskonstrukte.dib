#!meta

{"kernelInfo":{"defaultKernelName":"fsharp","items":[{"aliases":[],"languageName":"fsharp","name":"fsharp"}]}}

#!markdown

# Basiskonstrukte

#!markdown

## Variablen

In F# verwendet man in der Regel Typherleitung. Zeigen Sie mit der Maus auf einen Wert, um den hergeleiteten Typ zu sehen.

#!fsharp

let a = 42 // int
let b = "Oliver Sturm" // string

#!markdown

Typen werden in F# nur selten explizit angegeben. Es ist aber natürlich möglich:

#!fsharp

let a : int = 42;
let b : string = "Oliver Sturm";

#!markdown

Variablen sind im Standard unveränderlich. Erst mit dem Zusatz mutable kann man sie ändern.

#!fsharp

let a = 42 // Unveränderbarer Wert (Zahl)
// a <- a + 1 // nicht möglich
let b = "Oliver Sturm" // Unveränderbarer Wert (Zeichenkette)
let mutable c = "Holger Schwichtenberg"  // Veränderbare Variable
c <- "Dr. " + c

#!markdown

## Literale

#!fsharp

// Zahlen
let zahl = 42
let gebrocheneZahl = 42.5 
let grosseZahl = 42_000_000_000.123 

// Zeichenketten
let autor1 = "Oliver\nSturm" // Zeichenkette mit Escape-Sequenz
let autor2 = """Holger 
Schwichtenberg""" // Zeichenkette mit drei Anführungszeichen und Umbruch
let pfad = @"C:\temp" // Zeichenkette mit Verbatim-String

// String-Interpolation
// Interpolierte Zeichenkette (Template String)
let ausgabe1 = $"{autor1} ist älter als {zahl}."
// Interpolierte Zeichenkette mit Umbruch
let ausgabe2 = $"Autoren:\n{autor1}\nund\n{autor2}"
   // Interpolierte Zeichenkette mit drei Anführungszeichen und Umbruch
let ausgabe3 = $"""Autoren: 
{autor1}
und
{autor2}"""
// Interpolierte Zeichenkette mit drei Anführungszeichen und Ausdruck
let ausgabe4 = $"""Die Zahl {a} ist eine {if a % 2 = 0 then "gerade" else "ungerade"} Zahl."""

// Boolean
let bool = true

// Regex
let regEx = System.Text.RegularExpressions.Regex("a[0-9]")

// Datum
let datum = System.DateTime(2024, 7, 15)

 // Nullable, zum Austausch mit anderen .NET-Sprachen
let mutable nullableZahl = Nullable(42) // Nullable Ganzzahl

#!markdown

## Bildschirmausgaben

#!fsharp

 printf "verschiedene Möglichkeiten " // Ausgabe ohne Umbruch
 printfn "für Bildschirmausgaben" // Ausgabe mit Umbruch

 printfn "Ganzzahl: %d" zahl // Ganzzahl: 42
 printfn "Kommazahl: %f" gebrocheneZahl // Kommazahl: 42.50000
 printfn "Kommazahl: %8.4f" gebrocheneZahl // Kommazahl: 42.5000
 printfn "Kommazahl: %08.4f" gebrocheneZahl // Kommazahl: 042.5000
 printfn "Hexadezimalzahl: %x" zahl // Hexadezimalzahl: 2a
 printfn "Oktalzahl: %o" zahl // Oktalzahl: 52
 printfn "Binärzahl: %B" zahl // Binärzahl: 101010
 printfn "Gleitkommatyp: %e" gebrocheneZahl // Ausgabe ohne Umbruch
 printfn "Zeichenkette: %s" pfad // Zeichenkette: C:\Temp
 printfn "Bool: %b" bool // Bool: true
 printfn "Datum: %O" datum // Datum: 15.07.2024 00:00:00
 printfn "RegEx: %O" regEx // RegEx:a[0-9]

 printfn "Zahl oder null: %A" nullableZahl // Zahl oder null: 42
 nullableZahl <- Nullable() // null zuweisen geht nicht mit null!
 printfn "Zahl oder null: %A" nullableZahl // Zahl oder null: <null>
 Console.WriteLine("null an Methode übergeben: {0}", null);

 // Ausgabe mehrerer Werte
 printfn "%s ist älter als %d" b a // Oliver Sturm ist älter als 42
 // Ausgabe mit .NET-Klasse System.Console
 Console.WriteLine(b + " ist älter als  " + a.ToString() + ".") // Oliver Sturm ist älter als 42
 // Ausgabe in eine Zeichenkette
 let ausgabe = sprintf "%s ist älter als %d" b a
 printfn "%s" ausgabe

 // Ausgabe von interpolierten Zeichenketten (NUR ZUR KONTROLLE, nicht im Cheat Sheet)
 printfn "%s" ausgabe1 // Oliver Sturm ist älter als 42
 printfn "%s" ausgabe2 // Autoren:\nOliver Sturm\nund\nDr. Holger Schwichtenberg
 printfn "%s" ausgabe3 // Autoren:\nOliver Sturm\nund\nDr. Holger Schwichtenberg
 printfn "%s" ausgabe4 // Die Zahl 42 ist eine gerade Zahl.
